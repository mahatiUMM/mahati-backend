generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blood_pressures {
  id         Int       @id @default(autoincrement())
  user_id    Int
  image      String?
  sistol     Int
  diastole   Int
  heartbeat  Int
  created_at DateTime  @default(now())
  updated_at DateTime?
  user       users     @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "blood_pressures_user_id_fkey")
}

model bookmarks {
  id         Int       @id @default(autoincrement())
  video_id   Int
  user_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime?
  user       users     @relation(fields: [user_id], references: [id])
  video      videos    @relation(fields: [video_id], references: [id])

  @@index([user_id], map: "bookmarks_user_id_fkey")
  @@index([video_id], map: "bookmarks_video_id_fkey")
}

model brochures {
  id         Int             @id @default(autoincrement())
  title      String
  created_at DateTime        @default(now())
  updated_at DateTime?
  images     brochureimage[]
}

model brochureimage {
  id         Int       @id @default(autoincrement())
  imagePath  String
  brochureId Int
  brochure   brochures @relation(fields: [brochureId], references: [id])

  @@index([brochureId], map: "brochureimage_brochureId_fkey")
}

model questionnaires {
  id                      Int                       @id @default(autoincrement())
  type                    Int
  image                   String?
  title                   String?
  description             String?
  created_at              DateTime                  @default(now())
  updated_at              DateTime?
  questionnaire_questions questionnaire_questions[]
}

model questionnaire_answers {
  id          Int                     @id @default(autoincrement())
  question_id Int
  answer      Int
  user_id     Int
  created_at  DateTime                @default(now())
  updated_at  DateTime?
  question    questionnaire_questions @relation(fields: [question_id], references: [id])
  user        users                   @relation(fields: [user_id], references: [id])

  @@index([question_id], map: "questionnaire_answers_question_id_fkey")
  @@index([user_id], map: "questionnaire_answers_user_id_fkey")
}

model questionnaire_questions {
  id                    Int                     @id @default(autoincrement())
  questionnaire_id      Int
  question              String
  created_at            DateTime                @default(now())
  updated_at            DateTime?
  available_answers     available_answers[]
  questionnaire_answers questionnaire_answers[]
  questionnaire         questionnaires          @relation(fields: [questionnaire_id], references: [id])

  @@index([questionnaire_id], map: "questionnaire_questions_questionnaire_id_fkey")
  @@map("questionnaire_questions")
}

model available_answers {
  id                      Int                     @id @default(autoincrement())
  questionnaireQuestionId Int
  answer_text             String
  created_at              DateTime                @default(now())
  updated_at              DateTime?
  questionnaireQuestion   questionnaire_questions @relation(fields: [questionnaireQuestionId], references: [id])

  @@index([questionnaireQuestionId], map: "available_answers_questionnaireQuestionId_fkey")
  @@map("available_answers")
}

model reminders {
  id             Int         @id @default(autoincrement())
  user_id        Int
  medicine_name  String
  medicine_taken Int
  medicine_total Int
  amount         Int
  cause          String?
  cap_size       Int
  created_at     DateTime    @default(now())
  updated_at     DateTime?
  medicine_time  String?
  user           users       @relation(fields: [user_id], references: [id])
  schedules      schedules[]

  @@index([user_id], map: "reminders_user_id_fkey")
}

model schedules {
  id          Int       @id @default(autoincrement())
  reminder_id Int
  time        DateTime
  status      Int
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  reminder    reminders @relation(fields: [reminder_id], references: [id], onDelete: Cascade)

  @@index([reminder_id], map: "schedules_reminder_id_fkey")
}

model users {
  id                    Int                     @id @default(autoincrement())
  username              String
  email                 String
  password              String
  number                String
  photo                 String?
  isAdmin               Boolean                 @default(false)
  created_at            DateTime                @default(now())
  updated_at            DateTime?
  blood_pressures       blood_pressures[]
  bookmarks             bookmarks[]
  questionnaire_answers questionnaire_answers[]
  RefreshToken          refresh_tokens?
  reminders             reminders[]
  videos                videos[]
}

model refresh_tokens {
  user_id    Int      @id
  token      String
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id])
}

model videos {
  id            Int         @id @default(autoincrement())
  link          String
  user_id       Int
  created_at    DateTime    @default(now())
  updated_at    DateTime?
  author_name   String
  author_url    String
  thumbnail_url String
  title         String
  bookmarks     bookmarks[]
  user          users       @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "videos_user_id_fkey")
}

model articles {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  file        String
  created_at  DateTime  @default(now())
  updated_at  DateTime?
}
