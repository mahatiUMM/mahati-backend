generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the model for the 'blood_pressures' table
model blood_pressures {
  id        Int  @id @default(autoincrement())
  user_id   Int
  image     Int?
  sistol    Int
  diastole  Int
  heartbeat Int

  // Set foreign key relationship with the 'users' table
  user users @relation(fields: [user_id], references: [id])
}

// Define the model for the 'bookmarks' table
model bookmarks {
  id          Int     @id @default(autoincrement())
  video_id    Int
  user_id     Int
  is_bookmark Boolean

  // Set foreign key relationships
  video videos @relation(fields: [video_id], references: [id])
  user  users  @relation(fields: [user_id], references: [id])
}

// Define the model for the 'brochures' table
model brochures {
  id    Int    @id @default(autoincrement())
  image String
}

// Define the model for the 'questionnaires' table
model questionnaires {
  id                      Int                       @id @default(autoincrement())
  type                    Int
  questionnaire_questions questionnaire_questions[]
}

// Define the model for the 'questionnaire_answers' table
model questionnaire_answers {
  id          Int @id @default(autoincrement())
  question_id Int
  answer      Int
  user_id     Int

  // Set foreign key relationships
  question questionnaire_questions @relation(fields: [question_id], references: [id])
  user     users                   @relation(fields: [user_id], references: [id])
}

// Define the model for the 'questionnaire_questions' table
model questionnaire_questions {
  id               Int    @id @default(autoincrement())
  questionnaire_id Int
  question         String

  // Set foreign key relationship with the 'questionnaires' table
  questionnaire         questionnaires          @relation(fields: [questionnaire_id], references: [id])
  questionnaire_answers questionnaire_answers[]
}

// Define the model for the 'reminders' table
model reminders {
  id             Int     @id @default(autoincrement())
  user_id        Int
  medicine_name  String
  medicine_taken Int
  medicine_total Int
  amount         Int
  cause          String?
  cap_size       Int

  // Set foreign key relationship with the 'users' table
  user      users       @relation(fields: [user_id], references: [id])
  schedules schedules[]
}

// Define the model for the 'schedules' table
model schedules {
  id          Int      @id @default(autoincrement())
  reminder_id Int
  time        DateTime
  status      Int

  // Set foreign key relationship with the 'reminders' table
  reminder reminders @relation(fields: [reminder_id], references: [id])
}

// Define the model for the 'users' table
model users {
  id       Int     @id @default(autoincrement())
  username String
  email    String
  password String
  number   String
  photo    String?

  // Define relationships with other tables
  blood_pressures       blood_pressures[]
  bookmarks             bookmarks[]
  reminders             reminders[]
  videos                videos[]
  questionnaire_answers questionnaire_answers[]
  RefreshToken          refresh_tokens[]
}

model refresh_tokens {
  user_id    Int      @id
  token      String
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id])
}

// Define the model for the 'videos' table
model videos {
  id      Int    @id @default(autoincrement())
  link    String
  user_id Int

  // Set foreign key relationship with the 'users' table
  user      users       @relation(fields: [user_id], references: [id])
  bookmarks bookmarks[]
}
