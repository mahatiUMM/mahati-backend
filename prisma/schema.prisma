generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the model for the 'blood_pressures' table
model blood_pressures {
  id         Int       @id @default(autoincrement())
  user_id    Int
  image      String?
  sistol     Int
  diastole   Int
  heartbeat  Int
  created_at DateTime  @default(now())
  updated_at DateTime?

  // Set foreign key relationship with the 'users' table
  user users @relation(fields: [user_id], references: [id])
}

// Define the model for the 'bookmarks' table
model bookmarks {
  id          Int       @id @default(autoincrement())
  video_id    Int
  user_id     Int
  is_bookmark Boolean
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  // Set foreign key relationships
  video videos @relation(fields: [video_id], references: [id])
  user  users  @relation(fields: [user_id], references: [id])
}

// Define the model for the 'brochures' table
model brochures {
  id         Int       @id @default(autoincrement())
  title      String
  images     brochureimage[]
  created_at DateTime  @default(now())
  updated_at DateTime?
}

model brochureimage {
  id         Int      @id @default(autoincrement())
  imagePath  String
  brochureId Int
  brochure   brochures @relation(fields: [brochureId], references: [id])
}

// Define the model for the 'questionnaires' table
model questionnaires {
  id                      Int                       @id @default(autoincrement())
  type                    Int
  image                   String?
  title                   String?
  description             String?
  created_at              DateTime                  @default(now())
  updated_at              DateTime?
  questionnaire_questions questionnaire_questions[]
}

// Define the model for the 'questionnaire_answers' table
model questionnaire_answers {
  id          Int       @id @default(autoincrement())
  question_id Int
  answer      Int
  user_id     Int
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  // Set foreign key relationships
  question questionnaire_questions @relation(fields: [question_id], references: [id])
  user     users                   @relation(fields: [user_id], references: [id])
}

// Define the model for the 'questionnaire_questions' table
model questionnaire_questions {
  id                Int                 @id @default(autoincrement())
  questionnaire_id  Int
  question          String
  available_answers available_answers[]
  created_at        DateTime            @default(now())
  updated_at        DateTime?

  // Set foreign key relationship with the 'questionnaires' table
  questionnaire         questionnaires          @relation(fields: [questionnaire_id], references: [id])
  questionnaire_answers questionnaire_answers[]

  @@map("questionnaire_questions")
}

model available_answers {
  id                      Int       @id @default(autoincrement())
  questionnaireQuestionId Int
  answer_text             String
  created_at              DateTime  @default(now())
  updated_at              DateTime?

  questionnaireQuestion questionnaire_questions @relation(fields: [questionnaireQuestionId], references: [id])

  @@map("available_answers")
}

// Define the model for the 'reminders' table
model reminders {
  id             Int       @id @default(autoincrement())
  user_id        Int
  medicine_name  String
  medicine_taken Int
  medicine_total Int
  amount         Int
  cause          String?
  cap_size       Int
  medicine_time  String?
  expired_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime?

  // Set foreign key relationship with the 'users' table
  user      users       @relation(fields: [user_id], references: [id])
  schedules schedules[]
}

// Define the model for the 'schedules' table
model schedules {
  id          Int       @id @default(autoincrement())
  reminder_id Int
  time        DateTime
  status      Int
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  // Set foreign key relationship with the 'reminders' table
  reminder reminders @relation(fields: [reminder_id], references: [id], onDelete: Cascade)
}

// Define the model for the 'users' table
model users {
  id         Int       @id @default(autoincrement())
  username   String
  email      String
  password   String
  number     String
  photo      String?
  isAdmin    Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime?

  // Define relationships with other tables
  blood_pressures       blood_pressures[]
  bookmarks             bookmarks[]
  reminders             reminders[]
  videos                videos[]
  questionnaire_answers questionnaire_answers[]
  RefreshToken          refresh_tokens[]
}

model refresh_tokens {
  user_id    Int      @id
  token      String
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id])
}

// Define the model for the 'videos' table
model videos {
  id            Int       @id @default(autoincrement())
  link          String
  user_id       Int
  title         String
  author_name   String
  author_url    String
  thumbnail_url String
  created_at    DateTime  @default(now())
  updated_at    DateTime?

  // Set foreign key relationship with the 'users' table
  user      users       @relation(fields: [user_id], references: [id])
  bookmarks bookmarks[]
}
